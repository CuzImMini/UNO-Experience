import Foundationimport osimport SwiftUIstruct ClientGameEngine {        //Logger für Konsole    let log = Logger()        //Variable für Zugriff auf den Session-Vermittler    private var sessionHandler: ClientSessionManager            //Spielvariablen    var activeCard: Cards = .BLUE_ONE    var cardDeck: [Card] = []    var hasDrawn: Bool = false    var hasPlayed: Bool = true        var lastDeckCount: Int?        //aktuelle Ansicht auf Gerät...    //var viewState: ViewStates = .mainMenu        var winnerName: String?    var activeViewArray: [ViewStates] = []            //Initializer    init(sessionHandler: ClientSessionManager) {        log.debug("ClientGameEngine initialisiert")        self.sessionHandler = sessionHandler    }        mutating func startGame() {        log.debug("Startbefehl erhalten")        self.hasPlayed = true        activeViewArray.append(.clientInGame)        let arrayToLog = activeViewArray        log.debug("activeViewArray verändert. Nun: \(arrayToLog)")     }        func requestDraw(amount: Int) {        log.debug("Karte vom Wahrscheinlichkeitsstapel beim Host angefragt")        self.sessionHandler.sendTraffic(recipient: TargetNames.host.rawValue , prefix: TrafficTypes.cardActionIdentifier.rawValue, packet1: CardActions.requestCard.rawValue, packet2: String(amount))            }                mutating func cancelGame(selfInitiated: Bool) {        log.debug("Stoppe das Spiel. Befehl erhalten: \(selfInitiated)")        activeViewArray.removeLast()                let arrayToLog = activeViewArray        log.debug("activeViewArray verändert. Nun: \(arrayToLog)")                if selfInitiated {            sessionHandler.sendTraffic(recipient: TargetNames.allDevices.rawValue, prefix: TrafficTypes.gameActionIdentifier.rawValue, packet1: GameActions.stopGame.rawValue, packet2: "")        }        let sessionHandlerVar = self.sessionHandler        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {sessionHandlerVar.goOffline()}    }        mutating func changeCard(cardRawValue: String) {        log.debug("Wechsle aktive Karte auf \(cardRawValue)")                var cardToChangeTo: Cards = .BLUE_ONE                for card in Cards.allCases {            if cardRawValue == card.rawValue {                cardToChangeTo = card            }        }                self.activeCard = cardToChangeTo                    }        mutating func winHandler() {        log.debug("Kündige Gewinn an:")        sessionHandler.sendTraffic(recipient: TargetNames.allDevices.rawValue , prefix: TrafficTypes.gameActionIdentifier.rawValue, packet1: GameActions.win.rawValue, packet2: "")        activeViewArray.append(.win)        let arrayToLog = activeViewArray        log.debug("activeViewArray verändert. Nun: \(arrayToLog)")    }        mutating func looseHandler(opponentName: String) {        log.debug("Packet über Sieg des Gegners \(opponentName) empfangen.")        self.winnerName = opponentName        activeViewArray.append(.loose)                let arrayToLog = activeViewArray        log.debug("activeViewArray verändert. Nun: \(arrayToLog)")    }        mutating func playerAnnouncement() {        log.debug("Zug wurde angekündigt. Alle Gegner haben gelegt.")        self.hasPlayed = false    }        mutating func skipHandler() {        sessionHandler.sendTraffic(recipient: TargetNames.host.rawValue, prefix: TrafficTypes.cardActionIdentifier.rawValue, packet1: CardActions.requestSkip.rawValue, packet2: "")        self.hasDrawn = false        self.hasPlayed = true    }        }